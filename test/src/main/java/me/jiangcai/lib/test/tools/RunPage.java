package me.jiangcai.lib.test.tools;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.PageFactory;
import org.springframework.util.StringUtils;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;

public class RunPage extends JDialog {
    private static final Log log = LogFactory.getLog(RunPage.class);
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JTextField urlField;
    private JTextField classField;
    private JTextField codeField;

    public RunPage() {
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);

        buttonOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onOK();
            }
        });

        buttonCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        });

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    public static void main(String[] args) {
        RunPage dialog = new RunPage();

        Preferences preferences = Preferences.userNodeForPackage(RunPage.class);

        dialog.urlField.setText(preferences.get("URL", null));
        dialog.classField.setText(preferences.get("CLASS", null));
        dialog.codeField.setText(preferences.get("CODE", null));

        dialog.setPreferredSize(new Dimension(833, 210));
        dialog.pack();
        dialog.setVisible(true);
        System.exit(0);
    }

    private void onOK() {
        if (StringUtils.isEmpty(urlField.getText())) {
            JOptionPane.showMessageDialog(this, "请输入页面地址", "错误", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (StringUtils.isEmpty(classField.getText())) {
            JOptionPane.showMessageDialog(this, "请输入类全限定名称", "错误", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (StringUtils.isEmpty(codeField.getText())) {
            JOptionPane.showMessageDialog(this, "请输入代码", "错误", JOptionPane.WARNING_MESSAGE);
            return;
        }

        WebDriver driver = DriverSetup.newDriver();
        try {
            driver.get(urlField.getText());
            try {
                Object page = PageFactory.initElements(driver, Class.forName(classField.getText()));

                Preferences preferences = Preferences.userNodeForPackage(RunPage.class);
                preferences.put("URL", urlField.getText());
                preferences.put("CLASS", classField.getText());
                preferences.put("CODE", codeField.getText());

                try {
                    preferences.flush();
                } catch (BackingStoreException ignored) {
                    log.warn("", ignored);
                }

                ScriptEngine engine = new ScriptEngineManager().getEngineByExtension("js");
                engine.put("page", page);
                try {
                    engine.eval(codeField.getText());
                } catch (ScriptException e) {
                    log.error("", e);
                }

            } catch (ClassNotFoundException e) {
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage()
                        , "错误", JOptionPane.WARNING_MESSAGE);
                return;
            }
        } finally {
            driver.close();
        }

        dispose();
    }

    private void onCancel() {
        // add your code here if necessary
        dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel2.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("页面地址");
        panel3.add(label1);
        urlField = new JTextField();
        urlField.setColumns(60);
        urlField.setText("");
        panel3.add(urlField);
        final JLabel label2 = new JLabel();
        label2.setText("测试类名");
        panel3.add(label2);
        classField = new JTextField();
        classField.setColumns(30);
        panel3.add(classField);
        final JLabel label3 = new JLabel();
        label3.setPreferredSize(new Dimension(320, 16));
        label3.setText("");
        panel3.add(label3);
        final JLabel label4 = new JLabel();
        label4.setText("测试代码 (page 是页面实例)");
        panel3.add(label4);
        codeField = new JTextField();
        codeField.setColumns(62);
        panel3.add(codeField);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
